#version 430
uniform mat4 matView;
uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 viewPos;

uniform sampler2D diffuseMap;

in vec3 out_color;
in vec3 out_pos;
in vec3 out_normal;
in vec2 out_uv;


out vec4 gl_FragColor;

void main(void) {
	vec3 camPos = viewPos;
	vec3 lightDir= normalize(lightPos-out_pos);  
	vec3 viewDir= normalize(camPos-out_pos);
	
	//ambient lighting
	float Kamb= 0.7;
	vec3 ambient= Kamb*lightColor;
	
	//diffused lighting
	const int levels = 5;						//number of levels for diffuse color
	const float scaleFactor = 1.0 / levels;
	float Kdiff= 0.5; 
	vec3 norm= normalize(out_normal);
	float diff= max(dot(norm, lightDir), 0.0); 	//to clamp between 0 and 1
	vec3 diffuse= Kdiff*floor(diff * levels)*scaleFactor*lightColor;  	//light intensity * cos
	
	//specular lighting
	float Kspec = 0.5f;
	vec3 reflectDir= reflect(-lightDir, norm);
	float spec= pow(max(dot(viewDir, reflectDir), 0.0), 16);
	vec3 specular= vec3(0.0, 0.0, 0.0);
	if( dot(lightDir,norm) > 0.0)
	{
		specular= Kspec*spec*lightColor;
	}
	float spec_thresh=0.4; //set threshold for specular lighting
	float specMask = (pow(dot(reflectDir, norm), Kspec) > spec_thresh) ? 1 : 0;  //limit specular
	
	//Get outline
	float edge_thresh=0.0; //set threshold for edge detection
	float visiblity=dot(viewDir, norm);

	float edge_detection = (visiblity > edge_thresh) ? 0 : 1; 	//Black color if dot product is smaller than 0.2 else keep the same colors
	
	
	//final color for object
	vec3 tex_final= texture(diffuseMap, out_uv).rgb;
	vec3 final_color;
	if(edge_detection ==0){
		final_color= (ambient+diffuse+specular*specMask)*out_color; //teapot
		//final_color=  (ambient+diffuse+specular*specMask)*tex_final; //bigmax
	}else{
		float scale_origin=1;
		float scale=scale_origin+edge_thresh;
		float factor= (visiblity+scale_origin)/scale;
		if (factor>0.75)
			final_color= factor*ambient*out_color; //teapot
			//final_color= factor*(ambient+diffuse+specular*specMask)*tex_final; //bigmax
		else
			//final_color= factor*ambient*out_color; //teapot
			final_color=vec3(0.0, 0.0, 0.0);
	}
	gl_FragColor= vec4(final_color, 1.0f);
}